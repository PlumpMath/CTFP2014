\subsection{Perfect Trees}

Perfect (binary) trees may be represented via the data type:

\begin{spec}
  data PTree a = PLeaf a | PNode (PTree (a,a))
\end{spec}

Where |a| is some other data type, namely that for which leaves acquire values.
|PTree| is a functor in itself whose action on objects (data types in this
context) is already given by the data type declaration whilst on arrows,
implementation-wise, we could express it as

\begin{spec}
  instance Functor PTree where
    fmap f (PLeaf a) = PLeaf (f a)
    fmap f (PNode pt) = fmap (cross f f) pt
\end{spec}

Let us from now on abbreviate |PT| for |PTree|, |PL| for |PLeaf| and |PN| for
|PNode|. Given an argument datatype can be regarded as a categorical object in
\thick{F}un.

Due to the recursion, we will define the datatype as a fixed piont of some
functor F which works in the category of functors. On objects of the category:

---
  F : {\mathbb{F}}^{\mathbb{F}un} \rightarrow {\mathbb{F}}^{\mathbb{F}un}
  (F G) A = A + G (cross A A)  (1)
  (F G) f = f + G (cross f f)  (2)
---

Whilst on the arrows of the category (natural transformations):

---
  G, H : Obj Fun^Fun
  alpha : G -> H , natural transformation
  F alpha : F G -> F H    (3)
  (F alpha)_X : X + G (cross X X) -> X + H (cross X X)
  (F alpha)_X = id_x + alpha_(cross X X)
---

|PT| is the fixpoint of the given functor, so as such |PT : Obj Fun^Fun|
and the initial algebra for the category of F-algebras is:

---
  in : F PT -> PT
  in = PL join PN
  ==> \forall X : Obj Fun             in_X = PL_X join PN_X
          F PT X = X + PT (cross X X) ----------------------> PT X
---

Hence, we also have

---
  PL : Id -> PT
  PN : PT . Dup -> PT
---



