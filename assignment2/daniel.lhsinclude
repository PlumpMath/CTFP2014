\subsection{Applications}
To illustrate the concept of zygomorphism we
prove a connection to paramorphisms. In fact,
every paramorphism can be expressed by a zygomorphism
and vice versa.

\begin{theorem}
  For every zygomorphism |zygo g h| it holds that
  |zygo g h = para f| for |f = g . F (id * fold h)|.
\end{theorem}

\begin{proof}
  Note that by the universal property of zygomorphisms, |zygo g h|
  is the only arrow |a| such that |a . in = g . F (a /_\ fold h)|.

  Therefore, it is enough to prove that |para f . in = g . F (para f /_\ fold h)|:

  \begin{spec}
    para f . in = g . F (para f /_\ fold h)
    <=> {- universal property of paramorphisms -}
    f . F (para f /_\ id) = g . F (para f /_\ fold h)
    <=> {- definition of |f| -}
    g . F (id * fold h) . F (para f /_\ id) = g . F (para f /_\ fold h)
    <=> {- |F| functor -}
    g . F ((id * fold h) . (para f /_\ id)) = g . F (para f /_\ fold h)
    <=> {- |*| / |/_\| fusion -}
    g . F ((id . para f) /_\ (fold h . id)) = g . F (para f /_\ fold h)
    <=> {- identities -}
    g . F (para f /_\ fold h) = g . F (para f /_\ fold h)
    <=> {- reflexivity -}
    true
  \end{spec}
\end{proof}

Similarly, we can (trivially) use a zygomorphism instead of a paramorphism:

\begin{theorem}
  For every paramorphism |para f| it holds that
  |para f = zygo g h| for |g = f| and |h = in|.
\end{theorem}

\begin{proof}
  By the universal property of paramorphisms, it is enough to show that
  |zygo g h . in = f . F(zygo g h /_\ id)|. Since this paramorphisms are unique
  (up to isomorphism), it must then hold that |para f = zygo g h|.

  We compute:
  \begin{spec}
    zygo g h . in = f . F(zygo g h /_\ id)
    <=> {- universal property of zygomorphisms -}
    g . F(zygo g h /_\ fold h) = f . F(zygo g h /_\ id)
    <=> {- definitions of g and h -}
    f . F(zygo f in /_\ fold in) = f . F(zygo f in /_\ id)
    <=> {- reflection -}
    f . F(zygo f in /_\ id) = f . F(zygo f in /_\ id)
    <=> {- reflexivity -}
    true
  \end{spec}
\end{proof}

The basic intuition of a zygomorphism |zygo g h| is that we fold over
the data structure twice: We fold over the data structure as usual, but
when calling |g|, we also pass it the result of folding over the current
``argument'' (TODO: rephrase) using |h|.

To give a more practical example of applying zygomorphisms in
practice, we consider the problem of defining a function |noDups| to
determine whether or not a list contains duplicates.

This can be done by, in each step of a fold, checking that the current
element occurs only once in the list. This check is itself a fold.

We first translate zygomorphisms to Haskell:

\begin{code}
zygo :: (a -> t1 -> t1)
     -> t1
     -> (Either () (a, (t, t1)) -> t)
     -> [a]
     -> t
zygo h z g [] = g (Left ())
zygo h z g (x : xs) = g (Right (x, (zygo h z g xs, foldr h z (x : xs))))
\end{code}

The fold for counting elements in a list |xs| should return a function |f|
such that |f x| returns the number of occurrences of |x| in |xs|. This
can be implemented as follows:

\begin{code}
noDups :: Eq a => [a] -> Bool
noDups = zygo f z g
    where f x r y = r y + (if x == y then 1 else 0)
          z = const 0
          g (Left ()) = True
          g (Right (x, (r, fh))) = r && fh x == 1
\end{code}