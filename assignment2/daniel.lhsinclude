\subsection{Applications}
\subsubsection{Connection to paramorphisms}
To illustrate the concept of zygomorphisms we prove a connection to
paramorphisms. In fact, every paramorphism can be expressed by a
zygomorphism and vice versa.

To express a zygomorphism as a paramorphism, it suffices to
find an |f| such that |para f . in = g . F (fold h /_\ para f)|, by
the universal property of zygomorphisms. To find this |f|, we compute:

\begin{spec}
  para f . in  = g . F (fold h /_\ para f)
  <=> {- universal property of paramorphisms -}
  f . F (id /_\ para f) = g . F (fold h /_\ para f)
\end{spec}

A good candidate for |f| is an arrow of the form |g . F (a * b)| in
order to match the occurrence of |g| on the right-hand side. Moreover,
composing |g| with |F (a * b)| allows further simplification of the left-hand
side using properties of functors and the fusion law for |/_\| and |*|:

\begin{spec}
  f . F (id /_\ para f) = g . F (fold h /_\ para f)
  <== {- guess for ``shape'' of |f| -}
  g . F (a * b) . F (id /_\ para f) = g . F (fold h /_\ para f)
  <=> {- |*| / |/_\| fusion -}
  g . F ((a . id) /_\ (b . para f)) = g . F (fold h /_\ para f)
  <=> {- identity -}
  g . F (a /_\ (b . para f)) = g . F (fold h /_\ para f)
\end{spec}

Now we can clearly satisfy this by setting |a| to be |fold h| and
choosing |id| for |b|:

\begin{spec}
  g . F (a /_\ (b . para f)) = g . F (fold h /_\ para f)
  <=> {- definition of a and b -}
  g . F (fold h /_\ (id . para f)) = g . F (fold h /_\ para f)
  <=> {- identity -}
  g . F (fold h /_\ para f) = g . F (fold h /_\ para f)
\end{spec}

In summary, we obtain the following theorem:

\begin{theorem}
  For every zygomorphism |zygo g h| it holds that
  |zygo g h = para f| for |f = g . F (fold h * id)|.
\end{theorem}

Similarly, we can (trivially) use a zygomorphism instead of a paramorphism:

\begin{theorem}
  For every paramorphism |para f| it holds that
  |para f = zygo g h| for |g = f| and |h = in|.
\end{theorem}

\begin{proof}
  By the universal property of paramorphisms, it is enough to show that
  |zygo g h . in = f . F(id /_\ zygo g h)|. Since this paramorphisms are unique
  (up to isomorphism), it must then hold that |para f = zygo g h|.

  We compute:
  \begin{spec}
    zygo g h . in = f . F(id /_\ zygo g h)
    <=> {- universal property of zygomorphisms -}
    g . F(fold h /_\ zygo g h) = f . F(id /_\ zygo g h)
    <=> {- definitions of g and h -}
    f . F(fold in /_\ zygo f in) = f . F(id /_\ zygo f in)
    <=> {- reflection -}
    f . F(id /_\ zygo f in) = f . F(id /_\ zygo f in)
    <=> {- reflexivity -}
    true
  \end{spec}
\end{proof}

The basic intuition of a zygomorphism |zygo g h| is that we fold over
the data structure twice: We fold over the data structure as usual, but
when calling |g|, we also pass it the result of folding over the current
``argument'' using |h|.

\subsubsection{Tail of a list}
To give some evidence of the practical usefulness of zygomorphisms, we
now show how to define |safeTail| as a zygomorphism.  To avoid
reasoning about |undefined|, |safeTail| returns |[]| if an empty list
is given as an argument.

We first translate zygomorphisms to Haskell:

\begin{code}
zygo :: (a -> t1 -> t1)
     -> t1
     -> (a -> t -> t1 -> t)
     -> t
     -> [a]
     -> t
zygo h hz g gz [] = gz
zygo h hz g gz (x : xs) = g x (zygo h hz g gz xs) (foldr h hz xs)
\end{code}

This allows us to define |safeTail| as follows:

\begin{code}
safeTail = zygo h hz g gz
  where h = (:)
        hz = []
        gz = []
        g _ _ t = t
\end{code}

\subsubsection{Checking a list for duplicates}

To give another practical example of applying zygomorphisms in
practice, we consider the problem of defining a function |noDups| to
determine whether or not a list contains duplicates.

This can be done by, in each step of a fold, checking that the current
element does not occur again in the tail of the list. This check is
itself a fold.

The fold for checking than an element is not in a list |xs|, should
return a function |f| such that |f x| returns |True| if |x| does not
occur in |xs| and |False| otherwise.

\begin{code}
noDups :: Eq a => [a] -> Bool
noDups = zygo f hz g gz
    where f x r y = r y && x /= y
          hz = const True
          gz = True
          g x r fh = r && fh x
\end{code}
% Local Variables:
% mode: latex
% End:
